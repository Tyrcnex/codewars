// https://www.codewars.com/kata/540d0fdd3b6532e5c3000b5b

const factorials = [1n, 1n, 2n, 6n, 24n, 120n, 720n, 5040n, 40320n, 362880n, 3628800n, 39916800n, 479001600n, 6227020800n, 87178291200n, 1307674368000n, 20922789888000n, 355687428096000n, 6402373705728000n, 121645100408832000n, 2432902008176640000n, 51090942171709440000n, 1124000727777607680000n, 25852016738884976640000n, 620448401733239439360000n, 15511210043330985984000000n, 403291461126605635584000000n, 10888869450418352160768000000n, 304888344611713860501504000000n, 8841761993739701954543616000000n, 265252859812191058636308480000000n, 8222838654177922817725562880000000n, 263130836933693530167218012160000000n, 8683317618811886495518194401280000000n, 295232799039604140847618609643520000000n, 10333147966386144929666651337523200000000n, 371993326789901217467999448150835200000000n, 13763753091226345046315979581580902400000000n, 523022617466601111760007224100074291200000000n, 20397882081197443358640281739902897356800000000n, 815915283247897734345611269596115894272000000000n, 33452526613163807108170062053440751665152000000000n, 1405006117752879898543142606244511569936384000000000n, 60415263063373835637355132068513997507264512000000000n, 2658271574788448768043625811014615890319638528000000000n, 119622220865480194561963161495657715064383733760000000000n, 5502622159812088949850305428800254892961651752960000000000n, 258623241511168180642964355153611979969197632389120000000000n, 12413915592536072670862289047373375038521486354677760000000000n, 608281864034267560872252163321295376887552831379210240000000000n, 30414093201713378043612608166064768844377641568960512000000000000n];

function expand(expr) {
    let exp = BigInt(expr.match(/\^(\d*)/)[1]);
    if (exp === 0n) return "1";
    let linearExpr = expr.match(/\((.+)\)/)[1];
    let x = linearExpr.match(/[a-zA-Z]/)[0];
    let indexSign = linearExpr.split('').findLastIndex(e => e === x);
    let left = linearExpr.slice(0,indexSign)
    let a = BigInt(left ? (left === "-" ? -1 : left) : 1);
    let b = BigInt(linearExpr.slice(indexSign+1));
    if (b === 0n) return a**exp+x+"^"+exp;
    if (a === 0n) return b**exp+"";

    let terms = [];
    for (let i = 0n; i <= exp; i++) {
        let binomCoeff = factorials[exp] / (factorials[i] * factorials[exp - i]);
        let coeff = binomCoeff * a ** (exp - i) * b ** i;
        if (coeff === 0n) continue;
        if (coeff === 1n && exp > i) coeff = "";
        if (coeff === -1n && exp > i) coeff = "-";

        if (exp - i === 0n) terms.push(coeff+"");
        else if (exp - i === 1n) terms.push(coeff + x)
        else terms.push(coeff + x + "^" + (exp - i));
    }
    console.log(terms);
    return terms.reduce((a,b) => b[0]!=="-" ? a+"+"+b : a+b);
}

console.log(expand("(-n-12)^3"));